const { Pool } = require("pg");

const DATABASE_URL =
  process.env.DATABASE_URL ||
  "postgresql://neondb_owner:npg_5AaDEnCX3cLf@ep-soft-credit-adaqhtk9-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require";

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
  },
});

async function checkDatabase() {
  try {
    console.log("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...\n");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
    const tablesResult = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `);

    console.log("üìã –Ü—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ:");
    tablesResult.rows.forEach((row) => {
      console.log(`  - ${row.table_name}`);
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ users
    const usersColumnsResult = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'users'
      ORDER BY ordinal_position;
    `);

    console.log("\nüë§ –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ users:");
    if (usersColumnsResult.rows.length === 0) {
      console.log("  ‚ùå –¢–∞–±–ª–∏—Ü—è users –Ω–µ —ñ—Å–Ω—É—î!");
    } else {
      usersColumnsResult.rows.forEach((row) => {
        console.log(
          `  - ${row.column_name} (${row.data_type}) ${
            row.is_nullable === "NO" ? "NOT NULL" : "NULL"
          }`
        );
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ tasks
    const tasksColumnsResult = await pool.query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'tasks'
      ORDER BY ordinal_position;
    `);

    console.log("\nüìù –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ tasks:");
    if (tasksColumnsResult.rows.length === 0) {
      console.log("  ‚ùå –¢–∞–±–ª–∏—Ü—è tasks –Ω–µ —ñ—Å–Ω—É—î!");
    } else {
      tasksColumnsResult.rows.forEach((row) => {
        console.log(
          `  - ${row.column_name} (${row.data_type}) ${
            row.is_nullable === "NO" ? "NOT NULL" : "NULL"
          }`
        );
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const usersCountResult = await pool.query(
      "SELECT COUNT(*) as count FROM users"
    );
    console.log(
      `\nüë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${usersCountResult.rows[0].count}`
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–≤–¥–∞–Ω—å
    const tasksCountResult = await pool.query(
      "SELECT COUNT(*) as count FROM tasks"
    );
    console.log(`üìã –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å: ${tasksCountResult.rows[0].count}`);

    console.log("\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:", error.message);
  } finally {
    await pool.end();
  }
}

checkDatabase();
