const express = require("express");
const cors = require("cors");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const { Pool } = require("pg");

const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET =
  process.env.JWT_SECRET ||
  "58e4340959ca5cf1dd364be7d18757c21505040d3b540b33e9dddabebfd382d2";
const DATABASE_URL =
  process.env.DATABASE_URL ||
  "postgresql://neondb_owner:npg_5AaDEnCX3cLf@ep-soft-credit-adaqhtk9-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require";

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
  },
});

// ===== –ö–õ–ê–° –ú–ï–ù–ï–î–ñ–ï–†–ê –ë–ê–ó–ò –î–ê–ù–ò–• =====
class DatabaseManager {
  constructor(pool) {
    this.pool = pool;
  }

  async checkConnection() {
    try {
      const client = await this.pool.connect();
      console.log("‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL");
      client.release();
      return true;
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:", error.message);
      return false;
    }
  }

  async checkTableExists(tableName) {
    try {
      const result = await this.pool.query(
        `SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = $1
        )`,
        [tableName]
      );
      return result.rows[0].exists;
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ ${tableName}:`, error.message);
      return false;
    }
  }

  async checkColumnExists(tableName, columnName) {
    try {
      const result = await this.pool.query(
        `SELECT EXISTS (
          SELECT FROM information_schema.columns 
          WHERE table_name = $1 AND column_name = $2
        )`,
        [tableName, columnName]
      );
      return result.rows[0].exists;
    } catch (error) {
      console.error(
        `–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ ${tableName}.${columnName}:`,
        error.message
      );
      return false;
    }
  }

  async getTableInfo(tableName) {
    try {
      const result = await this.pool.query(
        `SELECT column_name, data_type, is_nullable, column_default
         FROM information_schema.columns 
         WHERE table_name = $1
         ORDER BY ordinal_position`,
        [tableName]
      );
      return result.rows;
    } catch (error) {
      console.error(
        `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—é ${tableName}:`,
        error.message
      );
      return [];
    }
  }

  async getRecordCount(tableName) {
    try {
      const result = await this.pool.query(
        `SELECT COUNT(*) as count FROM ${tableName}`
      );
      return Number.parseInt(result.rows[0].count);
    } catch (error) {
      console.error(
        `–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∑–∞–ø–∏—Å—ñ–≤ –≤ ${tableName}:`,
        error.message
      );
      return 0;
    }
  }

  async createUsersTable() {
    const sql = `
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        avatar TEXT DEFAULT '/placeholder.svg?height=120&width=120',
        registration_date DATE DEFAULT CURRENT_DATE,
        role VARCHAR(50) DEFAULT 'user',
        tfa_enabled BOOLEAN DEFAULT FALSE,
        tfa_secret TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    try {
      await this.pool.query(sql);
      console.log("‚úÖ –¢–∞–±–ª–∏—Ü—è users —Å—Ç–≤–æ—Ä–µ–Ω–∞/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users:", error.message);
      throw error;
    }
  }

  async createTasksTable() {
    const sql = `
      CREATE TABLE IF NOT EXISTS tasks (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        name VARCHAR(500) NOT NULL,
        description TEXT,
        priority VARCHAR(20) DEFAULT 'medium',
        deadline DATE,
        tags TEXT[],
        completed BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    try {
      await this.pool.query(sql);
      console.log("‚úÖ –¢–∞–±–ª–∏—Ü—è tasks —Å—Ç–≤–æ—Ä–µ–Ω–∞/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ tasks:", error.message);
      throw error;
    }
  }

  async createUserHistoryTable() {
    const sql = `
      CREATE TABLE IF NOT EXISTS user_history (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        type VARCHAR(50) NOT NULL,
        action VARCHAR(255) NOT NULL,
        details TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;

    try {
      await this.pool.query(sql);
      console.log("‚úÖ –¢–∞–±–ª–∏—Ü—è user_history —Å—Ç–≤–æ—Ä–µ–Ω–∞/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞");
    } catch (error) {
      console.error(
        "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ user_history:",
        error.message
      );
      throw error;
    }
  }

  async createIndexes() {
    const indexes = [
      {
        name: "idx_users_email",
        sql: "CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)",
      },
      {
        name: "idx_tasks_user_id",
        sql: "CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id)",
      },
      {
        name: "idx_tasks_completed",
        sql: "CREATE INDEX IF NOT EXISTS idx_tasks_completed ON tasks(completed)",
      },
      {
        name: "idx_user_history_user_id",
        sql: "CREATE INDEX IF NOT EXISTS idx_user_history_user_id ON user_history(user_id)",
      },
    ];

    for (const index of indexes) {
      try {
        await this.pool.query(index.sql);
        console.log(`‚úÖ –Ü–Ω–¥–µ–∫—Å ${index.name} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π`);
      } catch (error) {
        console.error(
          `‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É ${index.name}:`,
          error.message
        );
      }
    }
  }

  async addMissingColumns() {
    const requiredColumns = [
      {
        table: "users",
        column: "avatar",
        type: "TEXT",
        default: "'/placeholder.svg?height=120&width=120'",
      },
      {
        table: "users",
        column: "registration_date",
        type: "DATE",
        default: "CURRENT_DATE",
      },
      {
        table: "users",
        column: "role",
        type: "VARCHAR(50)",
        default: "'user'",
      },
      {
        table: "users",
        column: "tfa_enabled",
        type: "BOOLEAN",
        default: "FALSE",
      },
      { table: "users", column: "tfa_secret", type: "TEXT", default: "NULL" },
      {
        table: "users",
        column: "created_at",
        type: "TIMESTAMP",
        default: "CURRENT_TIMESTAMP",
      },
      {
        table: "users",
        column: "updated_at",
        type: "TIMESTAMP",
        default: "CURRENT_TIMESTAMP",
      },
    ];

    for (const col of requiredColumns) {
      const exists = await this.checkColumnExists(col.table, col.column);
      if (!exists) {
        try {
          const sql = `ALTER TABLE ${col.table} ADD COLUMN ${col.column} ${col.type} DEFAULT ${col.default}`;
          await this.pool.query(sql);
          console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ–ª–æ–Ω–∫—É ${col.table}.${col.column}`);
        } catch (error) {
          console.error(
            `‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ ${col.table}.${col.column}:`,
            error.message
          );
        }
      }
    }
  }

  async insertTestData() {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
      const existingUser = await this.pool.query(
        "SELECT id FROM users WHERE email = $1",
        ["ivan.petrenko@example.com"]
      );

      if (existingUser.rows.length === 0) {
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userResult = await this.pool.query(
          "INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING id",
          [
            "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ",
            "ivan.petrenko@example.com",
            "$2b$10$rOzJqQjQjQjQjQjQjQjQjOzJqQjQjQjQjQjQjQjQjQjQjQjQjQjQ",
          ]
        );

        const userId = userResult.rows[0].id;

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        await this.pool.query(
          "INSERT INTO tasks (user_id, name, description, priority, deadline, tags, completed) VALUES ($1, $2, $3, $4, $5, $6, $7)",
          [
            userId,
            "–ü–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è",
            "–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ",
            "high",
            new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // +7 –¥–Ω—ñ–≤
            ["—Ç–µ—Å—Ç", "–¥–µ–º–æ"],
            false,
          ]
        );

        console.log("‚úÖ –î–æ–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ");
        console.log(
          "   üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ivan.petrenko@example.com (–ø–∞—Ä–æ–ª—å: password123)"
        );
        console.log("   üìã –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ");
      } else {
        console.log("‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å");
      }
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:", error.message);
    }
  }

  async getDatabaseInfo() {
    const info = {
      tables: [],
      totalRecords: 0,
      status: "healthy",
    };

    try {
      // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å
      const tablesResult = await this.pool.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
        ORDER BY table_name
      `);

      for (const row of tablesResult.rows) {
        const count = await this.getRecordCount(row.table_name);
        const columns = await this.getTableInfo(row.table_name);

        info.tables.push({
          name: row.table_name,
          records: count,
          columns: columns.map((col) => ({
            name: col.column_name,
            type: col.data_type,
            nullable: col.is_nullable === "YES",
            default: col.column_default,
          })),
        });

        info.totalRecords += count;
      }

      return info;
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ë–î:", error.message);
      info.status = "error";
      info.error = error.message;
      return info;
    }
  }

  async initializeDatabase(options = {}) {
    const {
      dropExisting = false,
      addTestData = true,
      fixOnly = false,
    } = options;

    console.log("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...");
    console.log(
      `–†–µ–∂–∏–º: ${
        dropExisting
          ? "–ü–û–í–ù–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ù–Ø"
          : fixOnly
          ? "–¢–Ü–õ–¨–ö–ò –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø"
          : "–°–¢–í–û–†–ï–ù–ù–Ø/–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø"
      }`
    );

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      const connected = await this.checkConnection();
      if (!connected) {
        throw new Error("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö");
      }

      if (dropExisting && !fixOnly) {
        console.log("\nüóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å...");
        await this.pool.query("DROP TABLE IF EXISTS user_history CASCADE");
        await this.pool.query("DROP TABLE IF EXISTS tasks CASCADE");
        await this.pool.query("DROP TABLE IF EXISTS users CASCADE");
        console.log("‚úÖ –Ü—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏–¥–∞–ª–µ–Ω–æ");
      }

      if (!fixOnly) {
        console.log("\nüèóÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...");
        await this.createUsersTable();
        await this.createTasksTable();
        await this.createUserHistoryTable();
      }

      console.log("\nüîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...");
      await this.addMissingColumns();

      console.log("\nüìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤...");
      await this.createIndexes();

      if (addTestData && !fixOnly) {
        console.log("\nüìù –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...");
        await this.insertTestData();
      }

      console.log("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!");
      return { success: true, message: "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!" };
    } catch (error) {
      console.error("\n‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:", error.message);
      return { success: false, error: error.message };
    }
  }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
const dbManager = new DatabaseManager(pool);

// ===== MIDDLEWARE =====
app.use(
  helmet({
    contentSecurityPolicy: false, // –í–∏–º–∫–Ω—É—Ç–∏ CSP –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
  })
);
app.use(cors());
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true }));

// –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
app.use(express.static(path.join(__dirname)));
app.use("/css", express.static(path.join(__dirname, "css")));
app.use("/js", express.static(path.join(__dirname, "js")));
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
  max: 100,
  message: { error: "–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –∑ –≤–∞—à–æ—ó IP –∞–¥—Ä–µ—Å–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ" },
});
app.use("/api/", limiter);

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è multer –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = "uploads/avatars";
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, "avatar-" + uniqueSuffix + path.extname(file.originalname));
  },
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif/;
    const extname = allowedTypes.test(
      path.extname(file.originalname).toLowerCase()
    );
    const mimetype = allowedTypes.test(file.mimetype);

    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error("–î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Ñ–∞–π–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å"));
    }
  },
});

// Middleware –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
async function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) {
    return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π" });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const result = await pool.query(
      "SELECT id, email FROM users WHERE id = $1",
      [decoded.id]
    );

    if (result.rows.length === 0) {
      return res.status(403).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    req.user = decoded;
    next();
  } catch (err) {
    return res.status(403).json({ error: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
}

// –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
async function addToUserHistory(userId, type, action, details = "") {
  try {
    await pool.query(
      "INSERT INTO user_history (user_id, type, action, details) VALUES ($1, $2, $3, $4)",
      [userId, type, action, details]
    );
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
  }
}

// ===== API –ú–ê–†–®–†–£–¢–ò –î–õ–Ø –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ë–î =====

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
app.post("/api/admin/database/init", async (req, res) => {
  try {
    const {
      dropExisting = false,
      addTestData = true,
      fixOnly = false,
    } = req.body;
    const result = await dbManager.initializeDatabase({
      dropExisting,
      addTestData,
      fixOnly,
    });
    res.json(result);
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ë–î
app.get("/api/admin/database/status", async (req, res) => {
  try {
    const info = await dbManager.getDatabaseInfo();
    res.json(info);
  } catch (error) {
    res.status(500).json({ status: "error", error: error.message });
  }
});

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î
app.post("/api/admin/database/fix", async (req, res) => {
  try {
    const result = await dbManager.initializeDatabase({
      fixOnly: true,
      addTestData: false,
    });
    res.json(result);
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// ===== –ú–ê–†–®–†–£–¢–ò –î–õ–Ø –°–¢–ê–¢–ò–ß–ù–ò–• –°–¢–û–†–Ü–ù–û–ö =====

// –ö–æ—Ä–µ–Ω–µ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ auth.html
app.get("/", (req, res) => {
  res.redirect("/auth.html");
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
app.get("/check-auth", (req, res) => {
  res.sendFile(path.join(__dirname, "auth.html"));
});

// ===== API –ú–ê–†–®–†–£–¢–ò –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á =====

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post("/api/auth/register", async (req, res) => {
  const { name, email, password } = req.body;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
  if (!name || !email || !password) {
    return res.status(400).json({
      error: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ",
      field: !name
        ? "registerName"
        : !email
        ? "registerEmail"
        : "registerPassword",
    });
  }

  if (password.length < 6) {
    return res.status(400).json({
      error: "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤",
      field: "registerPassword",
    });
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({
      error: "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email",
      field: "registerEmail",
    });
  }

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const existingUser = await pool.query(
      "SELECT id FROM users WHERE email = $1",
      [email]
    );

    if (existingUser.rows.length > 0) {
      return res.status(400).json({
        error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î",
        field: "registerEmail",
      });
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const result = await pool.query(
      "INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING *",
      [name, email, hashedPassword]
    );

    const user = result.rows[0];

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    await addToUserHistory(user.id, "auth", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–∫–∞—É–Ω—Ç–∞");

    res.status(201).json({
      message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ",
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        avatar: user.avatar || "/placeholder.svg?height=120&width=120",
        registrationDate: user.registration_date,
        role: user.role,
      },
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –í—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post("/api/auth/login", async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({
      error: "Email —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ",
      field: !email ? "loginEmail" : "loginPassword",
    });
  }

  try {
    // –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const result = await pool.query("SELECT * FROM users WHERE email = $1", [
      email,
    ]);

    if (result.rows.length === 0) {
      return res.status(400).json({
        error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        field: "loginEmail",
      });
    }

    const user = result.rows[0];

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({
        error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å",
        field: "loginPassword",
      });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, {
      expiresIn: "24h",
    });

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    await addToUserHistory(user.id, "auth", "–í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É");

    res.json({
      message: "–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥",
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        avatar: user.avatar,
        registrationDate: user.registration_date,
        role: user.role,
        tfaEnabled: user.tfa_enabled,
      },
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
app.get("/api/auth/verify", authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(
      "SELECT id, name, email, avatar, registration_date, role, tfa_enabled FROM users WHERE id = $1",
      [req.user.id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const user = result.rows[0];
    res.json({
      valid: true,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        avatar: user.avatar,
        registrationDate: user.registration_date,
        role: user.role,
        tfaEnabled: user.tfa_enabled,
      },
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
app.post("/api/auth/forgot-password", async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({
      error: "Email –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π",
      field: "forgotEmail",
    });
  }

  try {
    const result = await pool.query("SELECT id FROM users WHERE email = $1", [
      email,
    ]);

    if (result.rows.length === 0) {
      return res.status(400).json({
        error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        field: "forgotEmail",
      });
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±–∏ –±—É–≤ –∫–æ–¥ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email
    res.json({
      message: "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à email",
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ===== API –ú–ê–†–®–†–£–¢–ò –î–õ–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê =====

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get("/api/user/profile", authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(
      "SELECT id, name, email, avatar, registration_date, role, tfa_enabled FROM users WHERE id = $1",
      [req.user.id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const user = result.rows[0];
    res.json({
      id: user.id,
      name: user.name,
      email: user.email,
      avatar: user.avatar,
      registrationDate: user.registration_date,
      role: user.role,
      tfaEnabled: user.tfa_enabled,
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.put("/api/user/profile", authenticateToken, async (req, res) => {
  const { name, email } = req.body;

  if (!name || !email) {
    return res.status(400).json({ error: "–Ü–º'—è —Ç–∞ email –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
  }

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ email
    const emailCheck = await pool.query(
      "SELECT id FROM users WHERE email = $1 AND id != $2",
      [email, req.user.id]
    );

    if (emailCheck.rows.length > 0) {
      return res.status(400).json({ error: "Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è" });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const result = await pool.query(
      "UPDATE users SET name = $1, email = $2, updated_at = CURRENT_TIMESTAMP WHERE id = $3 RETURNING id, name, email, avatar, registration_date, role, tfa_enabled",
      [name, email, req.user.id]
    );

    const user = result.rows[0];
    await addToUserHistory(req.user.id, "profile", "–û–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å");

    res.json({
      id: user.id,
      name: user.name,
      email: user.email,
      avatar: user.avatar,
      registrationDate: user.registration_date,
      role: user.role,
      tfaEnabled: user.tfa_enabled,
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞
app.post(
  "/api/user/avatar",
  authenticateToken,
  upload.single("avatar"),
  async (req, res) => {
    if (!req.file) {
      return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" });
    }

    try {
      // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
      const oldAvatarResult = await pool.query(
        "SELECT avatar FROM users WHERE id = $1",
        [req.user.id]
      );
      const oldAvatar = oldAvatarResult.rows[0]?.avatar;

      // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
      if (oldAvatar && oldAvatar.startsWith("/uploads/")) {
        const oldPath = path.join(__dirname, oldAvatar);
        if (fs.existsSync(oldPath)) {
          fs.unlinkSync(oldPath);
        }
      }

      const avatarPath = `/uploads/avatars/${req.file.filename}`;

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ë–î
      await pool.query(
        "UPDATE users SET avatar = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2",
        [avatarPath, req.user.id]
      );

      await addToUserHistory(req.user.id, "avatar", "–ó–º—ñ–Ω–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä");

      res.json({ avatar: avatarPath });
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
);

// ===== API –ú–ê–†–®–†–£–¢–ò –î–õ–Ø –ó–ê–í–î–ê–ù–¨ =====

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get("/api/user/tasks", authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(
      "SELECT id, name, description, priority, deadline, tags, completed, created_at FROM tasks WHERE user_id = $1 ORDER BY created_at DESC",
      [req.user.id]
    );

    const tasks = result.rows.map((task) => ({
      id: task.id,
      name: task.name,
      description: task.description,
      priority: task.priority,
      deadline: task.deadline,
      tags: task.tags || [],
      completed: task.completed,
      createdAt: task.created_at,
    }));

    res.json(tasks);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post("/api/user/tasks", authenticateToken, async (req, res) => {
  const { tasks } = req.body;

  if (!Array.isArray(tasks)) {
    return res.status(400).json({ error: "–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º" });
  }

  try {
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    await pool.query("DELETE FROM tasks WHERE user_id = $1", [req.user.id]);

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    for (const task of tasks) {
      await pool.query(
        "INSERT INTO tasks (user_id, name, description, priority, deadline, tags, completed, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)",
        [
          req.user.id,
          task.name,
          task.description || null,
          task.priority || "medium",
          task.deadline || null,
          task.tags || [],
          task.completed || false,
          task.createdAt || new Date().toISOString(),
        ]
      );
    }

    await addToUserHistory(req.user.id, "tasks", "–û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è");

    res.json({ message: "–ó–∞–≤–¥–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥—ñ–π
app.get("/api/user/history", authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(
      "SELECT id, type, action, details, created_at FROM user_history WHERE user_id = $1 ORDER BY created_at DESC LIMIT 50",
      [req.user.id]
    );

    const history = result.rows.map((item) => ({
      id: item.id,
      type: item.type,
      action: item.action,
      details: item.details,
      timestamp: item.created_at,
    }));

    res.json(history);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
app.delete("/api/user/history", authenticateToken, async (req, res) => {
  try {
    await pool.query("DELETE FROM user_history WHERE user_id = $1", [
      req.user.id,
    ]);
    res.json({ message: "–Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get("/api/user/statistics", authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(
      "SELECT COUNT(*) as total, COUNT(*) FILTER (WHERE completed = true) as completed, COUNT(*) FILTER (WHERE completed = false) as active, COUNT(*) FILTER (WHERE deadline < CURRENT_DATE AND completed = false) as overdue FROM tasks WHERE user_id = $1",
      [req.user.id]
    );

    const stats = result.rows[0];
    const total = Number.parseInt(stats.total);
    const completed = Number.parseInt(stats.completed);
    const active = Number.parseInt(stats.active);
    const overdue = Number.parseInt(stats.overdue);

    res.json({
      total,
      completed,
      active,
      overdue,
      completionRate: total > 0 ? Math.round((completed / total) * 100) : 0,
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ===== –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö =====
app.use((error, req, res, next) => {
  console.error(error);

  if (error instanceof multer.MulterError) {
    if (error.code === "LIMIT_FILE_SIZE") {
      return res.status(400).json({ error: "–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π" });
    }
  }

  res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// 404 –æ–±—Ä–æ–±–Ω–∏–∫
app.use((req, res) => {
  if (req.path.startsWith("/api/")) {
    res.status(404).json({ error: "–ï–Ω–¥–ø–æ—ñ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
  } else {
    res.status(404).sendFile(path.join(__dirname, "auth.html"));
  }
});

// ===== PWA API –ú–ê–†–®–†–£–¢–ò =====

// –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
app.post("/api/push/subscribe", authenticateToken, async (req, res) => {
  try {
    const subscription = req.body;

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ –ë–î (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é push_subscriptions)
    console.log("üì¨ –ù–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ push:", subscription);

    res.json({ success: true, message: "–ü—ñ–¥–ø–∏—Å–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏" });
  }
});

// –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ PWA
app.post("/api/analytics/pwa", (req, res) => {
  try {
    const analytics = req.body;
    console.log("üìä PWA Analytics:", analytics);

    res.json({ success: true });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏" });
  }
});

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
async function startServer() {
  try {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    console.log("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...");
    await dbManager.initializeDatabase({
      dropExisting: false,
      addTestData: true,
      fixOnly: false,
    });

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    const dirs = ["uploads/avatars"];
    dirs.forEach((dir) => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    });

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log("\n" + "=".repeat(60));
      console.log("üöÄ TO DO LIST SERVER –ó–ê–ü–£–©–ï–ù–û!");
      console.log("=".repeat(60));
      console.log(`üì± –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: http://localhost:${PORT}`);
      console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è: http://localhost:${PORT}/auth.html`);
      console.log(`üìã –ó–∞–≤–¥–∞–Ω–Ω—è: http://localhost:${PORT}/index.html`);
      console.log(`üë§ –ü—Ä–æ—Ñ—ñ–ª—å: http://localhost:${PORT}/profile.html`);
      console.log("\nüîß API –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ë–î:");
      console.log(`   POST /api/admin/database/init - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î`);
      console.log(`   GET  /api/admin/database/status - –°—Ç–∞–Ω –ë–î`);
      console.log(`   POST /api/admin/database/fix - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ë–î`);
      console.log("\n‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!");
      console.log("=".repeat(60));
    });
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:", error.message);
    process.exit(1);
  }
}

// Graceful shutdown
process.on("SIGTERM", async () => {
  console.log("üõë –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...");
  await pool.end();
  process.exit(0);
});

process.on("SIGINT", async () => {
  console.log("üõë –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...");
  await pool.end();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();

module.exports = app;
